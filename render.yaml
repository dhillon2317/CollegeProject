services:
  - type: web
    name: complaint-analyzer
    env: python
    buildCommand: |
      #!/bin/bash
      # Exit on error and print commands for debugging
      set -exo pipefail
      
      # Function to log messages with timestamps
      log() {
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
      }
      
      # Debug info
      log "=== Build Script Started ==="
      log "Current directory: $(pwd)"
      log "System information:"
      uname -a
      log "Python version:"
      python --version || echo "Python not found"
      log "Pip version:"
      pip --version || echo "Pip not found"
      
      log "=== Directory Structure ==="
      log "Top level contents:"
      ls -la || log "Failed to list directory contents"
      
      # Check for required directories
      log "=== Checking for required directories ==="
      REQUIRED_DIRS=(
        "."
        "sbackend"
        "sbackend/camplaint-analyzer"
        "frontend"
      )
      
      for dir in "${REQUIRED_DIRS[@]}"; do
        if [ -d "$dir" ]; then
          log "✅ Found directory: $dir"
          log "Contents of $dir:"
          ls -la "$dir" || log "Failed to list contents of $dir"
        else
          log "⚠️  Warning: Missing directory: $dir"
        fi
      done
      
      # Set Python path
      export PYTHONPATH="${PYTHONPATH}:/opt/render/project/src"
      log "PYTHONPATH set to: $PYTHONPATH"
      
      # Check models directory
      log "=== Checking for models directory ==="
      MODELS_DIR="./sbackend/camplaint-analyzer/models"
      if [ -d "$MODELS_DIR" ]; then
        log "✅ Models directory found at $MODELS_DIR"
        log "📂 Contents of models directory:"
        ls -la "$MODELS_DIR" || log "Failed to list models directory contents"
      else
        log "⚠️  Warning: Models directory not found at $MODELS_DIR"
        log "Attempting to create models directory..."
        mkdir -p "$MODELS_DIR" && {
          log "✅ Successfully created models directory at $MODELS_DIR"
        } || {
          log "❌ Failed to create models directory at $MODELS_DIR"
        }
      fi
      
      # Set up Node.js
      echo "=== Setting up Node.js ==="
      
      # Set NVM directory
      export NVM_DIR="$HOME/.nvm"
      
      # Check if nvm is installed, if not install it
      if ! command -v nvm &> /dev/null; then
        echo "nvm not found, installing..."
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
        # Source nvm
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      fi
      
      # Source nvm if not already loaded
      if [ -s "$NVM_DIR/nvm.sh" ]; then
        \. "$NVM_DIR/nvm.sh"
      else
        echo "❌ nvm not found after installation attempt"
        exit 1
      fi
      
      # Install and use Node.js 16
      echo "Installing Node.js 16.20.2..."
      nvm install 16.20.2 || { echo "❌ Failed to install Node.js 16.20.2"; exit 1; }
      nvm use 16.20.2 || { echo "❌ Failed to use Node.js 16.20.2"; exit 1; }
      
      # Verify installation
      echo "Node.js version: $(node -v || echo 'node not found')"
      echo "npm version: $(npm -v || echo 'npm not found')"
      
      # Install Python dependencies
      echo "=== Installing Python dependencies ==="
      python -m pip install --upgrade pip || { echo "Failed to upgrade pip"; exit 1; }
      pip install --no-cache-dir -U setuptools wheel || { echo "Failed to install setuptools/wheel"; exit 1; }
      
      # First install pydantic 2.x which is required by thinc 8.x
      echo "Installing pydantic first to prevent conflicts..."
      pip install --no-cache-dir "pydantic>=2.0.0,<3.0.0" || { echo "Failed to install pydantic"; exit 1; }
      
      # Install core numerical packages first
      echo "Installing core numerical packages..."
      pip install --no-cache-dir "numpy>=1.21.0,<2.0.0" || { echo "Failed to install numpy"; exit 1; }
      pip install --no-cache-dir "scipy>=1.7.0,<2.0.0" || { echo "Failed to install scipy"; exit 1; }
      
      # Install spaCy and its core dependencies first
      echo "Installing spaCy and core dependencies..."
      pip install --no-cache-dir \
        "spacy==3.8.7" \
        "thinc==8.3.6" \
        "srsly==2.5.1" \
        "wasabi==1.1.3" \
        "cymem==2.0.11" \
        "preshed==3.0.10" \
        "spacy-legacy==3.0.12" \
        "spacy-loggers==1.0.5" \
        "typer==0.9.0" || { echo "Failed to install spaCy core"; exit 1; }
      
      # Install project requirements with --no-deps to prevent conflicts
      echo "Installing project requirements from root requirements.txt..."
      if [ -f "requirements.txt" ]; then
        pip install --no-cache-dir --no-deps -r requirements.txt || \
          { echo "❌ Failed to install requirements"; exit 1; }
        echo "✅ Successfully installed requirements"
        
        # Install pipdeptree if not available
        echo "Installing pipdeptree for dependency analysis..."
        pip install --no-cache-dir pipdeptree || echo "⚠️  Failed to install pipdeptree, continuing..."
        
        # Install requirements with basic dependency resolution
        echo "Installing requirements with basic dependency resolution..."
        pip install --no-cache-dir -r requirements.txt || {
          echo "⚠️  Some dependencies might have issues, but continuing..."
        }
      else
        echo "❌ Error: requirements.txt not found in the root directory"
        exit 1
      fi
      
      # Build frontend
      echo "=== Building Frontend ==="
      if [ -d "frontend/complain-analyzer-ai" ]; then
        cd frontend/complain-analyzer-ai || { echo "Failed to enter frontend directory"; exit 1; }
        
        # Clean and install dependencies
        echo "Cleaning and installing frontend dependencies..."
        rm -rf node_modules package-lock.json .next
        npm cache clean --force
        
        # Check Node.js version and set appropriate options
        NODE_MAJOR_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
        if [ "$NODE_MAJOR_VERSION" -ge 17 ]; then
          echo "Using Node.js ${NODE_MAJOR_VERSION}, setting NODE_OPTIONS"
          export NODE_OPTIONS=--openssl-legacy-provider
        fi
        
        # Install frontend dependencies
        echo "Running npm install..."
        npm install --legacy-peer-deps || { 
          echo "⚠️  npm install failed, trying with --force..."; 
          npm install --force || {
            echo "❌ Failed to install frontend dependencies"; 
            exit 1; 
          }
        }
        
        # Build frontend
        echo "Building frontend..."
        NODE_OPTIONS=--openssl-legacy-provider npm run build || \
          { echo "Frontend build failed"; exit 1; }
        
        # Verify build
        if [ -d ".next" ]; then
          echo "✅ Frontend build successful"
        else
          echo "❌ Frontend build failed"
          exit 1
        fi
        cd ../..
      else
        echo "⚠️  Warning: Frontend directory not found, skipping frontend build"
      fi
      
      # Final check
      echo "=== Final Verification ==="
      if [ -f "sbackend/camplaint-analyzer/models/category_model.pkl" ]; then
        echo "✅ Model file found"
      else
        echo "⚠️  Warning: Model file not found"
      fi
      
      echo "=== Build Script Completed Successfully ==="
    
    startCommand: "gunicorn --bind :$PORT --workers 1 --threads 2 --timeout 120 wsgi:application"
    
    envVars:
      - key: PYTHON_VERSION
        value: 3.9.0
      - key: PYTHONUNBUFFERED
        value: 1
      - key: PORT
        value: 10000
      - key: PYTHONPATH
        value: /opt/render/project/src
    
    plan: free
    healthCheckPath: /health
