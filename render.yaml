services:
  - type: web
    name: complaint-analyzer
    env: python
    buildCommand: |
      #!/bin/bash
      set -e  # Exit on error
      
      # Debug info
      echo "=== Build Script Started ==="
      echo "Current directory: $(pwd)"
      echo "Directory contents:"
      ls -la
      
      # Set Python path
      export PYTHONPATH="${PYTHONPATH}:/opt/render/project/src"
      
      # Check models directory
      echo "=== Checking for models directory ==="
      MODELS_DIR="sbackend/camplaint-analyzer/models"
      
      if [ -d "$MODELS_DIR" ]; then
        echo "‚úÖ Models directory found at $MODELS_DIR"
        echo "üìÇ Contents:"
        ls -la "$MODELS_DIR"
      else
        echo "‚ùå Models directory not found at $MODELS_DIR"
        echo "üìÇ Current directory structure (top level):"
        ls -la
        echo "üîç Full directory structure:"
        find . -maxdepth 3 -type d | sort
      fi
      
      # Install Python dependencies
      echo "=== Installing Python dependencies ==="
      python -m pip install --upgrade pip
      pip install --no-cache-dir -U setuptools wheel
      pip install --no-cache-dir -r sbackend/camplaint-analyzer/requirements.txt
      
      # Install NLP dependencies
      echo "=== Installing NLP dependencies ==="
      pip install --no-cache-dir spacy
      python -m spacy download en_core_web_sm --no-cache
      python -c "import nltk; nltk.download('punkt', quiet=True)"
      
      # Set up Node.js
      echo "=== Setting up Node.js ==="
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      
      if ! command -v nvm &> /dev/null; then
        echo "Installing nvm..."
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      fi
      
      # Use Node.js 16
      nvm install 16.20.2
      echo "Node.js version: $(node -v)"
      echo "npm version: $(npm -v)"
      
      # Build frontend
      echo "=== Building Frontend ==="
      cd frontend/complain-analyzer-ai
      
      # Clean and install dependencies
      rm -rf node_modules package-lock.json .next
      npm cache clean --force
      export NODE_OPTIONS=--openssl-legacy-provider
      
      echo "Installing frontend dependencies..."
      npm install --legacy-peer-deps --force
      
      echo "Building frontend..."
      NODE_OPTIONS=--openssl-legacy-provider npm run build
      
      # Verify build
      if [ -d ".next" ]; then
        echo "‚úÖ Frontend build successful"
      else
        echo "‚ùå Frontend build failed"
        exit 1
      fi
      
      cd ../..
      
      # Final check
      echo "=== Final Verification ==="
      if [ -f "sbackend/camplaint-analyzer/models/category_model.pkl" ]; then
        echo "‚úÖ Model file found"
      else
        echo "‚ö†Ô∏è  Warning: Model file not found"
      fi
      
      echo "=== Build Script Completed Successfully ==="
    
    startCommand: "gunicorn --bind :$PORT --workers 1 --threads 2 --timeout 120 wsgi:application"
    
    envVars:
      - key: PYTHON_VERSION
        value: 3.9.0
      - key: PYTHONUNBUFFERED
        value: 1
      - key: PORT
        value: 10000
      - key: PYTHONPATH
        value: /opt/render/project/src
    
    plan: free
    healthCheckPath: /health
